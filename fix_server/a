
"""
def preprocess_image(image_path, target_size=(224, 224), feature="eye_r", landmark_predictor=None):
    img = cv2.imread(image_path)
    if img is None:
        raise ValueError("Image not found or unreadable")

    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    detector = dlib.get_frontal_face_detector()
    faces = detector(img, 1)
    if len(faces) == 0:
        raise ValueError("No face detected in the image")

    for face in faces:
        landmarks = landmark_predictor(img, face)
        landmarks = face_utils.shape_to_np(landmarks)
        if feature == "eye_r":
            eye_points = landmarks[36:42]
        elif feature == "eye_l":
            eye_points = landmarks[42:48]
        elif feature == "mouth":
            eye_points = landmarks[48:68]
        else:
            raise ValueError("Invalid feature type")
        
        x_min, y_min = eye_points.min(axis=0)
        x_max, y_max = eye_points.max(axis=0)
        margin = 15
        x_min = max(0, x_min - margin)
        y_min = max(0, y_min - margin)
        x_max = min(img.shape[1], x_max + margin)
        y_max = min(img.shape[0], y_max + margin)

        cropped_img = img[y_min:y_max, x_min:x_max]
        denoised_img = remove_noise_bilateral(cropped_img)
        sharpened_img = apply_sharpening(denoised_img)
        resized_img = cv2.resize(sharpened_img, target_size, interpolation=cv2.INTER_CUBIC)
        normalized_img = normalize_image(resized_img)

        return np.expand_dims(normalized_img, axis=0)
"""